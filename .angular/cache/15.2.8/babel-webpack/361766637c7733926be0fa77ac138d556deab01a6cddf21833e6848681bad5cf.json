{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CartItem } from '../../cart/cart-item.model';\nlet ProductListComponent = class ProductListComponent {\n  constructor(productService, cartService, route) {\n    this.productService = productService;\n    this.cartService = cartService;\n    this.route = route;\n    this.ID = 'id';\n    this.KEYWORD = 'keyword';\n    // For pagination\n    this.pageNumber = 1;\n    this.pageSize = 4;\n    this.totalElements = 0;\n  }\n  ngOnInit() {\n    this.paramsSubscription = this.route.paramMap.subscribe(params => {\n      this.listProducts();\n    });\n  }\n  listProducts() {\n    this.searchMode = this.route.snapshot.paramMap.has(this.KEYWORD);\n    if (this.searchMode) {\n      const keyword = this.route.snapshot.paramMap.get(this.KEYWORD);\n      this.searchKeyword = keyword === '' ? 'All' : keyword;\n      this.handleSearchProducts(keyword);\n    } else {\n      this.handleProducts(this.route.snapshot.paramMap);\n    }\n  }\n  onUpdatePageSize(event) {\n    this.pageSize = +event.target.value;\n    this.pageNumber = 1;\n    this.listProducts();\n  }\n  onAddToCart(product) {\n    this.cartService.addToCart(new CartItem(product));\n  }\n  ngOnDestroy() {\n    if (this.paramsSubscription) {\n      this.paramsSubscription.unsubscribe();\n    }\n  }\n  handleSearchProducts(keyword) {\n    this.fetchSearchProducts(keyword);\n  }\n  fetchSearchProducts(keyword) {\n    this.productService.getProductsByKeyword(keyword, this.pageNumber, this.pageSize).subscribe(this.handleResponseProducts.bind(this));\n  }\n  handleProducts(params) {\n    if (params.has(this.ID)) {\n      const currentCategoryId = +params.get(this.ID);\n      // Check if we have a different category than previous\n      // Note: Angular will reuse a component if it is currently being viewed\n      // If we have a different category id than previous then set thePageNumber back to 1\n      if (this.previousCategoryId !== currentCategoryId) {\n        this.pageNumber = 1;\n      }\n      this.previousCategoryId = currentCategoryId;\n      this.fetchProductsByCategoryId(currentCategoryId);\n      this.fetchCategoryById(currentCategoryId);\n    } else {\n      this.fetchProducts();\n      this.categoryName = 'All';\n    }\n  }\n  fetchProducts() {\n    this.productService.getProductList(this.pageNumber, this.pageSize).subscribe(this.handleResponseProducts.bind(this));\n  }\n  fetchProductsByCategoryId(categoryId) {\n    this.productService.getProductListByCategory(categoryId, this.pageNumber, this.pageSize).subscribe(this.handleResponseProducts.bind(this));\n  }\n  handleResponseProducts(response) {\n    this.products = response._embedded.products;\n    this.pageNumber = response.page.number + 1;\n    this.pageSize = response.page.size;\n    this.totalElements = response.page.totalElements;\n  }\n  fetchCategoryById(categoryId) {\n    this.productService.getProductCategoryById(categoryId).subscribe(productCategory => {\n      this.categoryName = productCategory.categoryName;\n    });\n  }\n};\nProductListComponent = __decorate([Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css']\n})], ProductListComponent);\nexport { ProductListComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}