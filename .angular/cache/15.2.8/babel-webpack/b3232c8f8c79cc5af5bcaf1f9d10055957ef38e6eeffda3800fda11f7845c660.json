{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(http) {\n      this.http = http;\n      this.PRODUCTS_FILE_URL = 'assets/products.json';\n      this.PRODUCT_CATEGORIES_FILE_URL = 'assets/categories.json';\n    }\n    getProduct(productId) {\n      return this.getProductsFromFile().pipe(map(products => products.find(product => product.id === productId)));\n    }\n    getProductList(page, pageSize) {\n      return this.getProductsFromFile().pipe(map(products => this.paginateProducts(products, page, pageSize)));\n    }\n    getProductListByCategory(categoryId, page, pageSize) {\n      return this.getProductsFromFile().pipe(map(products => {\n        const filteredProducts = products.filter(product => product.categoryId === categoryId);\n        return this.paginateProducts(filteredProducts, page, pageSize);\n      }));\n    }\n    getProductCategories() {\n      return this.getProductCategoriesFromFile();\n    }\n    getProductCategoryById(id) {\n      return this.getProductCategoriesFromFile().pipe(map(categories => categories.find(category => category.id === id)));\n    }\n    getProductsByKeyword(keyword, page, pageSize) {\n      return this.getProductsFromFile().pipe(map(products => {\n        const filteredProducts = products.filter(product => product.name.toLowerCase().includes(keyword.toLowerCase()));\n        return this.paginateProducts(filteredProducts, page, pageSize);\n      }));\n    }\n    getProductsFromFile() {\n      return this.http.get(this.PRODUCTS_FILE_URL);\n    }\n    getProductCategoriesFromFile() {\n      return this.http.get(this.PRODUCT_CATEGORIES_FILE_URL);\n    }\n    paginateProducts(products, page, pageSize) {\n      const startIndex = (page - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const paginatedProducts = products.slice(startIndex, endIndex);\n      return {\n        _embedded: {\n          products: paginatedProducts\n        },\n        page: {\n          size: pageSize,\n          totalElements: products.length,\n          totalPages: Math.ceil(products.length / pageSize),\n          number: page\n        }\n      };\n    }\n  }\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}